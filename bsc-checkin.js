require('dotenv').config();
const { Web3 } = require('web3'); // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è v4.x
const cron = require('node-cron');

if (!process.env.PRIVATE_KEY) {
    throw new Error('‚ùå –î–æ–±–∞–≤—å—Ç–µ PRIVATE_KEY –≤ .env —Ñ–∞–π–ª');
}

const privateKey = process.env.PRIVATE_KEY.trim();
if (!/^(0x)?[0-9a-fA-F]{64}$/.test(privateKey)) {
    throw new Error('‚ùå –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 64 hex-—Å–∏–º–≤–æ–ª–∞');
}

const formattedPrivateKey = privateKey.startsWith('0x') ? privateKey : `0x${pri>

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π
let account;
try {
    account = new Web3().eth.accounts.privateKeyToAccount(formattedPrivateKey);
    console.log('‚úÖ –ö–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ê–¥—Ä–µ—Å:', account.address);
} catch (e) {
    throw new Error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–ª—é—á–µ: ' + e.message);
}


// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CHECK_IN_CONTRACT_ADDRESS = '0xD615Eb3ea3DB2F994Dce7d471A02d521B8E1D22d';
const BSC_RPC_URL = 'https://bsc-dataseed.binance.org/';
const PRIVATE_KEY = process.env.PRIVATE_KEY;

// ABI –¥–ª—è check-in —Ñ—É–Ω–∫—Ü–∏–∏
const CHECK_IN_ABI = [
    {
        "inputs": [],
        "name": "checkIn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è v4.x)
const web3 = new Web3(new Web3.providers.HttpProvider(BSC_RPC_URL));

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å);
web3.eth.accounts.wallet.add(account);

// –ö–æ–Ω—Ç—Ä–∞–∫—Ç
const checkInContract = new web3.eth.Contract(CHECK_IN_ABI, CHECK_IN_CONTRACT_A>

async function performCheckIn() {
    try {
        const gasPrice = await web3.eth.getGasPrice();
        const gasEstimate = await checkInContract.methods.checkIn().estimateGas>
            from: account.address
        });
        const nonce = await web3.eth.getTransactionCount(account.address, 'pend>
        
        const tx = {
            from: account.address,
            to: CHECK_IN_CONTRACT_ADDRESS,
            gas: gasEstimate,
            gasPrice: gasPrice,
            data: checkInContract.methods.checkIn().encodeABI(),
            chainId: 56,
            nonce,
        };

        const signedTx = await account.signTransaction(tx);
        const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransa>
        
        console.log(`Check-in —É—Å–ø–µ—à–µ–Ω! Tx hash: ${receipt.transactionHash}`);
        return receipt;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ check-in:', error);
        throw error;
    }
}

function getRandomTime() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 00:00 –∏ 23:59
    const hour = Math.floor(Math.random() * 24);
    const minute = Math.floor(Math.random() * 60);
    return { hour, minute };
}

function getNextDayRandomTime() {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    tomorrow.setHours(0, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –¥–Ω—è
    
    const { hour, minute } = getRandomTime();
    tomorrow.setHours(hour, minute, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
    
    return tomorrow;
}

function scheduleNextCheckIn() {
    const nextRun = getNextDayRandomTime();
    const delay = nextRun.getTime() - Date.now();
    
    console.log(`‚è∞ –°–ª–µ–¥—É—é—â–∏–π check-in –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${nextRun.toISOString()}>
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª
    if (global.checkInTimer) {
        clearTimeout(global.checkInTimer);
    }
    
    global.checkInTimer = setTimeout(async () => {
        console.log(`üöÄ –ó–∞–ø—É—Å–∫ check-in –≤ ${new Date().toISOString()}`);
        try {
            await performCheckIn();
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π check-in –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            scheduleNextCheckIn();
        } catch (err) {
            console.error('üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —á–∞—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', err.message);
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —á–∞—Å
            setTimeout(scheduleNextCheckIn, 60 * 60 * 1000);
        }
    }, delay);
}

console.log('üü¢ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ check-in –∑–∞–ø—É—â–µ–Ω');
scheduleNextCheckIn();

                                                                            
                                                                            
